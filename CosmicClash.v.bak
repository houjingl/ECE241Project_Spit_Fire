module VGADisplay2Obj(CLOCK_50, KEY, LEDR,
				PS2_CLK,PS2_DAT, //For keyboard
        		VGA_R, VGA_G, VGA_B, //VGA adapter required
				VGA_HS, VGA_VS, VGA_BLANK_N, VGA_SYNC_N, VGA_CLK
);

    wire [2:0] U1_B1_color, U1_B2_color, U1_B3_color, 
               U2_B1_color, U2_B2_color, U2_B3_color;
    wire [8:0] U1_B1_X, U1_B2_X, U1_B3_X, 
               U2_B1_X, U2_B2_X, U2_B3_X;
    wire [7:0] U1_B1_Y, U1_B2_Y, U1_B3_Y,
               U2_B1_Y, U2_B2_Y, U2_B3_Y;
    wire U1_B1_plot_enable, U1_B2_plot_enable, U1_B3_plot_enable, 
         U2_B1_plot_enable, U2_B2_plot_enable, U2_B3_plot_enable;

    // Test
    parameter [2:0] U1B1color = 3'b111;
    parameter [8:0] U1B1X = 9'd33, U1B2X = 9'd35, U1B3X = 9'd37,
                    U2B1X = 9'd170, U2B2X = 9'd173, U2B3X = 9'd176;
    parameter [7:0] testY = 8'd210;
    parameter testploten = 1'b1;

    assign U1_B1_color = U1B1color;
    assign U1_B2_color = U1B1color;
    assign U1_B3_color = U1B1color;
    assign U2_B1_color = U1B1color;
    assign U2_B2_color = U1B1color;
    assign U2_B3_color = U1B1color;

    assign U1_B1_X = U1B1X;
    assign U1_B2_X = U1B2X;
    assign U1_B3_X = U1B3X;
    assign U2_B1_X = U2B1X;
    assign U2_B2_X = U2B2X;
    assign U2_B3_X = U2B3X;

    assign U1_B1_Y = testY;
    assign U1_B2_Y = testY;
    assign U1_B3_Y = testY;
    assign U2_B1_Y = testY;
    assign U2_B2_Y = testY;
    assign U2_B3_Y = testY;

    assign U1_B1_plot_enable = testploten;
    assign U1_B2_plot_enable = testploten;
    assign U1_B3_plot_enable = testploten;
    assign U2_B1_plot_enable = testploten;
    assign U2_B2_plot_enable = testploten;
    assign U2_B3_plot_enable = testploten;


   input CLOCK_50;
	input [3:0]	KEY;
	
	output [9:0] LEDR;

	inout PS2_CLK;
	inout PS2_DAT;

	output [7:0] VGA_R;
	output [7:0] VGA_G;
	output [7:0] VGA_B;
	output VGA_HS;
	output VGA_VS;
	output VGA_BLANK_N;
	output VGA_SYNC_N;
	output VGA_CLK;	

	//User 1
   wire [4:0] User1_XC;
   wire [4:0] User1_YC;
   wire [2:0] User1_memoryColor;
	wire [2:0] User1_VGA_color;
	wire [8:0] User1_VGA_X;
	wire [7:0] User1_VGA_Y;
	wire User1_plot_enable;
	wire [8:0] User1_init_X;
	wire [7:0] User1_init_Y;
   //Memory for User1 Object
   User2Object U1RedPlane ({User1_YC, User1_XC}, CLOCK_50, 3'b0, 1'b0, User1_memoryColor);
	DisplayObj User1 (CLOCK_50, KEY, ps2_key_data, ps2_key_pressed,LEDR[3:0],
					  User1_VGA_X, User1_VGA_Y, User1_VGA_color, User1_plot_enable,
					  User1_init_X, User1_init_Y,
					  User1_memoryColor, User1_XC, User1_YC);
					  defparam User1.User1OrUser2 = 1'b0;
					  defparam User1.X_init_loc = 9'd1;
					  defparam User1.Y_init_loc = 8'd1;

	
	
	//User 2
   wire [4:0] User2_XC;
   wire [4:0] User2_YC;
   wire [2:0] User2_memoryColor;
	wire [2:0] User2_VGA_color;
	wire [8:0] User2_VGA_X;
	wire [7:0] User2_VGA_Y;
	wire User2_plot_enable;
	wire [8:0] User2_init_X;
	wire [7:0] User2_init_Y;
   //Memory for User2 Object
    lilredplane U2 ({User2_YC, User2_XC}, CLOCK_50, 3'b0, 1'b0, User2_memoryColor);
	DisplayObj User2 (CLOCK_50, KEY, ps2_key_data, ps2_key_pressed, LEDR[7:4],
					  User2_VGA_X, User2_VGA_Y, User2_VGA_color, User2_plot_enable,
					  User2_init_X, User2_init_Y,
					  User2_memoryColor, User2_XC, User2_YC);
					  defparam User2.User1OrUser2 = 1'b1;
					  defparam User2.X_init_loc = 9'd288;
					  defparam User2.Y_init_loc = 8'd208;

    
	Object_To_Paint_Selector OTPMUX (CLOCK_50, rstn,
								User1_VGA_color, User1_VGA_X, User1_VGA_Y, User1_plot_enable,
                                User2_VGA_color, User2_VGA_X, User2_VGA_Y, User2_plot_enable,
								U1_B1_color, U1_B1_X, U1_B1_Y, U1_B1_plot_enable,
								U1_B2_color, U1_B2_X, U1_B2_Y, U1_B2_plot_enable,
								U1_B3_color, U1_B3_X, U1_B3_Y, U1_B3_plot_enable,
								U2_B1_color, U2_B1_X, U2_B1_Y, U2_B1_plot_enable,
								U2_B2_color, U2_B2_X, U2_B2_Y, U2_B2_plot_enable,
								U2_B3_color, U2_B3_X, U2_B3_Y, U2_B3_plot_enable,
								VGA_X, VGA_Y, plot_enable, VGA_COLOR
                                );
	

    //VGA Adapter
	wire [8:0] VGA_X;
	wire [7:0] VGA_Y;
	wire [2:0] VGA_COLOR;
	wire plot_enable;
	wire rstn;
	
	assign rstn = KEY[0];
	
	//PS2 keyboard
	wire [7:0]	ps2_key_data;
	wire ps2_key_pressed;

	PS2_Controller PS2 (
	// Inputs
	.CLOCK_50				(CLOCK_50),
	.reset				(~KEY[0]),

	// Bidirectionals
	.PS2_CLK			(PS2_CLK),
 	.PS2_DAT			(PS2_DAT),

	// Outputs
	.received_data		(ps2_key_data),
	.received_data_en	(ps2_key_pressed)
	);
	
    vga_adapter VGA1 (
		.resetn(rstn),
		.clock(CLOCK_50),
      .colour(VGA_COLOR),
		.x(VGA_X),
		.y(VGA_Y),
		.plot(plot_enable/*plot_enable*/),
		.VGA_R(VGA_R),
		.VGA_G(VGA_G),
		.VGA_B(VGA_B),
		.VGA_HS(VGA_HS),
		.VGA_VS(VGA_VS),
		.VGA_BLANK_N(VGA_BLANK_N),
		.VGA_SYNC_N(VGA_SYNC_N),
		.VGA_CLK(VGA_CLK));
	defparam VGA1.RESOLUTION = "320x240";
	defparam VGA1.MONOCHROME = "FALSE";
	defparam VGA1.BITS_PER_COLOUR_CHANNEL = 1;
	defparam VGA1.BACKGROUND_IMAGE = "whitebackground.mif";

endmodule

module Object_To_Paint_Selector(CLOCK_50, rstn,
								User1_VGA_color, User1_VGA_X, User1_VGA_Y, User1_plot_enable,
                                User2_VGA_color, User2_VGA_X, User2_VGA_Y, User2_plot_enable,
								U1_B1_color, U1_B1_X, U1_B1_Y, U1_B1_plot_enable,
								U1_B2_color, U1_B2_X, U1_B2_Y, U1_B2_plot_enable,
								U1_B3_color, U1_B3_X, U1_B3_Y, U1_B3_plot_enable,
								U2_B1_color, U2_B1_X, U2_B1_Y, U2_B1_plot_enable,
								U2_B2_color, U2_B2_X, U2_B2_Y, U2_B2_plot_enable,
								U2_B3_color, U2_B3_X, U2_B3_Y, U2_B3_plot_enable,
								VGA_X, VGA_Y, plot_enable, VGA_COLOR
                                );

	input [2:0] User1_VGA_color, User2_VGA_color, U1_B1_color, U1_B2_color, U1_B3_color, U2_B1_color, U2_B2_color, U2_B3_color;
	input [8:0] User1_VGA_X, User2_VGA_X, U1_B1_X, U1_B2_X, U1_B3_X, U2_B1_X, U2_B2_X, U2_B3_X;
	input [7:0] User1_VGA_Y, User2_VGA_Y, U1_B1_Y, U1_B2_Y, U1_B3_Y, U2_B1_Y, U2_B2_Y, U2_B3_Y;
	input User1_plot_enable, User2_plot_enable;
	input U1_B1_plot_enable, U1_B2_plot_enable, U1_B3_plot_enable;
	input U2_B1_plot_enable, U2_B2_plot_enable, U2_B3_plot_enable;

	input CLOCK_50;
	input rstn;

	output reg [8:0] VGA_X;
	output reg [7:0] VGA_Y;
	output reg plot_enable;
	output reg [2:0] VGA_COLOR;
	
	reg [9:0] fast;
	always@ (posedge CLOCK_50, negedge rstn)
	begin
		if(rstn == 1'b0)
			fast <= 10'b1111111111;
		else if(slow_clock_trigger == 1'b1)//
			fast <= 10'b1111111111;
		else
			fast <= fast - 1'b1;
	end

	wire slow_clock_trigger;
	assign slow_clock_trigger = (fast == 10'b0) ? 1:0;
// Rotational shift reg for large clock period
	reg [2:0] display_indicator;
	parameter [2:0] default_set = 3'b001;
	always @ (posedge CLOCK_50, negedge rstn) begin
		if (!rstn)
			display_indicator <= default_set;
		else if (slow_clock_trigger)
			display_indicator <= {display_indicator[0], display_indicator[2:1]};
	end
// For selecting which object to display
	parameter [2:0] obj1 = 3'b001, obj2 = 3'b010, bullets = 3'b100;
	reg [0:0] bullet_display_en;
  	always @(posedge CLOCK_50)begin
		if(display_indicator == obj1) begin
			VGA_X <= User1_VGA_X;
			VGA_Y <= User1_VGA_Y;
			plot_enable <= User1_plot_enable;
			VGA_COLOR <= User1_VGA_color;		
			bullet_display_en <= 1'b0;	
		end
		else if (display_indicator == obj2) begin
			VGA_X <= User2_VGA_X;
			VGA_Y <= User2_VGA_Y;
			plot_enable <= User2_plot_enable;
			VGA_COLOR <= User2_VGA_color;
			bullet_display_en <= 1'b0;				
		end
		else if (display_indicator == bullets) begin
			bullet_display_en <= 1'b1;
		end
	end
// Fast Clock for bullet display
	reg [6:0] bullet_fast; //load = 7'b1111111 = 128
	parameter [6:0] load = 7'b1111111;
	always @ (posedge CLOCK_50, negedge rstn) begin
		if (!rstn)
			bullet_fast <= load;
		else if (bullet_slow || !bullet_display_en)
			bullet_fast <= load;
		else if (bullet_display_en)
			bullet_fast <= bullet_fast - 7'b1;		
	end

	wire bullet_slow;
	assign bullet_slow = (bullet_fast == 7'b0) ? 1:0;
// Rotational Shift reg for displaying bullet objects
	reg [5:0] bullet_display_indicator;
	parameter [5:0] default_ = 6'b000001;
	always @ (posedge CLOCK_50, negedge rstn) begin
		if(!rstn)
			bullet_display_indicator <= default_;
		else if (!bullet_display_en)
			bullet_display_indicator <= default_;
		else if (bullet_display_en && bullet_slow)
			bullet_display_indicator <= {bullet_display_indicator[4:0], 1'b0};
	end
// register & selection for choosing which bullet object to diplay on to the VGA display
	parameter [5:0] user1_bullet1 = 6'b000001, user1_bullet2 = 6'b000010, user1_bullet3 = 6'b000100, 
					user2_bullet1 = 6'b001000, user2_bullet2 = 6'b010000, user2_bullet3 = 6'b100000;
	always @ (posedge CLOCK_50) begin
		if(bullet_display_en) begin
			if(bullet_display_indicator == user1_bullet1) begin
				VGA_X <= U1_B1_X;
				VGA_Y <= U1_B1_Y;
				plot_enable <= U1_B1_plot_enable;
				VGA_COLOR <= U1_B1_color;
			end
			else if (bullet_display_indicator == user1_bullet2) begin
				VGA_X <= U1_B2_X;
				VGA_Y <= U1_B2_Y;
				plot_enable <= U1_B2_plot_enable;
				VGA_COLOR <= U1_B2_color;				
			end
			else if (bullet_display_indicator == user1_bullet3) begin
				VGA_X <= U1_B3_X;
				VGA_Y <= U1_B3_Y;
				plot_enable <= U1_B3_plot_enable;
				VGA_COLOR <= U1_B3_color;			
			end
			else if (bullet_display_indicator == user2_bullet1) begin
				VGA_X <= U2_B1_X;
				VGA_Y <= U2_B1_Y;
				plot_enable <= U2_B1_plot_enable;
				VGA_COLOR <= U2_B1_color;				
			end
			else if (bullet_display_indicator == user2_bullet2) begin
				VGA_X <= U2_B2_X;
				VGA_Y <= U2_B2_Y;
				plot_enable <= U2_B2_plot_enable;
				VGA_COLOR <= U2_B2_color;					
			end
			else if (bullet_display_indicator == user2_bullet3) begin
				VGA_X <= U2_B3_X;
				VGA_Y <= U2_B3_Y;
				plot_enable <= U2_B3_plot_enable;
				VGA_COLOR <= U2_B3_color;				
			end															
		end
	end



endmodule

